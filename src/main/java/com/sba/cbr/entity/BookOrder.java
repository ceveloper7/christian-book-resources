package com.sba.cbr.entity;
// Generated Aug 14, 2025, 1:05:46â€¯PM by Hibernate Tools 6.2.25.Final

import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import jakarta.persistence.AttributeOverride;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;

/**
 * BookOrder generated by hbm2java
 */
@Entity
@Table(name = "book", catalog = "cbr", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@AttributeOverride(name = "id", column = @Column(name = "order_id"))
@AttributeOverride(name = "active", column = @Column(name = "is_active"))
public class BookOrder extends BaseEntity implements java.io.Serializable {

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	private Customer customer;
	
	
	private LocalDateTime orderDate;
	
	@Column(name = "r_address_line1", nullable = false, length = 256)
	private String addressLine1;
	
	@Column(name = "r_address_line2", nullable = false, length = 256)
	private String addressLine2;
	
	@Column(name = "r_firstname", nullable = false, length = 30)
	private String firstname;
	
	@Column(name = "r_lastname", nullable = false, length = 30)	
	private String lastname;
	
	@Column(name = "r_phone", nullable = false, length = 15)
	private String phone;
	
	@Column(name = "r_city", nullable = false, length = 32)	
	private String city;
	
	@Column(name = "r_state", nullable = false, length = 45)
	private String state;
	
	@Column(name = "r_zipcode", nullable = false, length = 24)
	private String zipcode;
	
	@Column(name = "r_country", nullable = false, length = 4)
	private String country;
	
	@Column(name = "payment_method", nullable = false, length = 20)
	private String paymentMethod;
	
	@Column(name = "total", nullable = false, precision = 12, scale = 0)
	private double total;
	
	@Column(name = "subtotal", nullable = false, precision = 12, scale = 0)
	private double subtotal;
	
	@Column(name = "shipping_fee", nullable = false, precision = 12, scale = 0)
	private double shippingFee;
	
	@Column(name = "tax", nullable = false, precision = 12, scale = 0)
	private double tax;
	
	@Column(name = "status", nullable = false, length = 20)
	private String status;
	
	@Embedded
	private AuditFields audit;
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "bookOrder", cascade = CascadeType.ALL, orphanRemoval = true)
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public BookOrder() {
	}

	public BookOrder(String addressLine1, String addressLine2, String firstname, String lastname, String phone, String city,
			String state, String zipcode, String country, Customer customer, LocalDateTime orderDate, 
			String paymentMethod, double total, double subtotal, double shippingFee, double tax, String status, AuditFields audit) {
		
		this.addressLine1 = addressLine1;
		this.addressLine2 = addressLine2;
		this.firstname = firstname;
		this.lastname = lastname;
		this.phone = phone;
		this.city = city;
		this.state = state;
		this.zipcode = zipcode;
		this.country = country;
		this.customer = customer;
		this.orderDate = orderDate;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.subtotal = subtotal;
		this.shippingFee = shippingFee;
		this.tax = tax;
		this.status = status;
		this.audit = audit;
	}

	public BookOrder(String addressLine1, String addressLine2, String firstname, String lastname, String phone, String city,
			String state, String zipcode, String country, Customer customer, LocalDateTime orderDate, 
			String paymentMethod, double total, double subtotal, double shippingFee, double tax, String status, AuditFields audit, Set orderDetails) {
		
		this.addressLine1 = addressLine1;
		this.addressLine2 = addressLine2;
		this.firstname = firstname;
		this.lastname = lastname;
		this.phone = phone;
		this.city = city;
		this.state = state;
		this.zipcode = zipcode;
		this.country = country;
		this.customer = customer;
		this.orderDate = orderDate;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.subtotal = subtotal;
		this.shippingFee = shippingFee;
		this.tax = tax;
		this.status = status;
		this.audit = audit;
		
		this.orderDetails = orderDetails;
	}

	@Transient
	public String getCountryName() {
		return new Locale("", this.country).getDisplayCountry();
	}	

	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public LocalDateTime getOrderDate() {
		return this.orderDate;
	}

	public void setOrderDate(LocalDateTime orderDate) {
		this.orderDate = orderDate;
	}

	public String getPaymentMethod() {
		return this.paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	public double getTotal() {
		return this.total;
	}

	public void setTotal(double total) {
		this.total = total;
	}

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public AuditFields getAuditFields() {
		return audit;
	}
	
	public void setAuditFields(AuditFields audit) {
		this.audit = audit;
	}

	public Set getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	@Transient
	public int getBookCopies() {
		int total = 0;
		
		for (OrderDetail orderDetail : orderDetails) {
			total += orderDetail.getQuantity();
		}
		
		return total;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.getId() == null) ? 0 : this.getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BookOrder other = (BookOrder) obj;
		if (this.getId() == null) {
			if (other.getId() != null)
				return false;
		} else if (!this.getId().equals(other.getId()))
			return false;
		return true;
	}

}
